// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4909.PTCAgileBot.subsystems;

import org.usfirst.frc4909.PTCAgileBot.Robot;
import org.usfirst.frc4909.PTCAgileBot.RobotMap;
import org.usfirst.frc4909.PTCAgileBot.commands.*;

import edu.wpi.first.wpilibj.BuiltInAccelerometer;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Drivetrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController leftMotor = RobotMap.drivetrainLeftMotor;
    private final SpeedController rightMotor = RobotMap.drivetrainRightMotor;
    private final RobotDrive driveControl = RobotMap.drivetrainDriveControl;
    private final BuiltInAccelerometer accel = RobotMap.accelerometer;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public void tankDrive(){
    	double left = Robot.oi.getLeftY()*(1-Robot.oi.getRightTrigger()/2);
    	double right = Robot.oi.getRightY()*(1-Robot.oi.getRightTrigger()/2);
    	driveControl.tankDrive(left, right);
    }
    
    public void tankDriveSlow(){
    	double left = Robot.oi.getLeftY()/2;
    	double right = Robot.oi.getRightY()/2;
    	driveControl.tankDrive(left, right);
    }

    
    public void drive(double left, double right)
    {
    	driveControl.tankDrive(left, right);    	
    }
    
    public void doADonut(double speed)
    {
    	driveControl.drive(speed, 0.283);
    }
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    //+ Directions
    
    //Forward
    public double getX()
    {
    	return accel.getX();
    }
    
    //Left
    public double getY()
    {
    	return accel.getY();
    }
    
    //Up
    public double getZ()
    {
    	return accel.getZ();
    }
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new Drive());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
}

